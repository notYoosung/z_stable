local S = minetest.get_translator(minetest.get_current_modname())  local mod_screwdriver = minetest.get_modpath("screwdriver")  local on_rotate if mod_screwdriver then     on_rotate = screwdriver.rotate_3way end local end_rod_name = "mcl_end:end_rod" local end_rod_def = {     description = S("End Rod"),     _doc_items_longdesc = S("End rods are decorative light sources."),     tiles = {         "mcl_end_end_rod.png",     },     drawtype = "mesh",     mesh = "mcl_end_rod.obj",     is_ground_content = false,     paramtype = "light",     paramtype2 = "facedir",     light_source = minetest.LIGHT_MAX,     sunlight_propagates = true,     groups = { dig_immediate = 3, deco_block = 1, destroy_by_lava_flow = 1, end_rod = 1 },     use_texture_alpha = "clip",     selection_box = {         type = "fixed",         fixed = {             { -0.125, -0.5, -0.125, 0.125, 0.5, 0.125 },         },     },     collision_box = {         type = "fixed",         fixed = {             { -0.125, -0.5, -0.125, 0.125, 0.5, 0.125 },          },     },     on_place = function(itemstack, placer, pointed_thing)         if pointed_thing.type ~= "node" then             return itemstack         end          local p0 = pointed_thing.under         local p1 = pointed_thing.above         local param2 = 0          local placer_pos = placer:get_pos()         if placer_pos then             local dir = {                 x = p1.x - placer_pos.x,                 y = p1.y - placer_pos.y,                 z = p1.z - placer_pos.z             }             param2 = minetest.dir_to_facedir(dir)         end          if p0.y - 1 == p1.y then             param2 = 20         elseif p0.x - 1 == p1.x then             param2 = 16         elseif p0.x + 1 == p1.x then             param2 = 12         elseif p0.z - 1 == p1.z then             param2 = 8         elseif p0.z + 1 == p1.z then             param2 = 4         end          return minetest.item_place(itemstack, placer, pointed_thing, param2)     end,      sounds = mcl_sounds.node_sound_glass_defaults(),     _mcl_blast_resistance = 0, } minetest.register_node(":"..end_rod_name, end_rod_def)  local colored_end_rods = {     { "white",     S("White End Rod"),      "white" },     { "grey",      S("Grey End Rod"),       "dark_grey" },     { "silver",    S("Light Grey End Rod"), "grey" },     { "black",     S("Black End Rod"),      "black" },     { "red",       S("Red End Rod"),        "red" },     { "yellow",    S("Yellow End Rod"),     "yellow" },     { "green",     S("Green End Rod"),      "dark_green" },     { "cyan",      S("Cyan End Rod"),       "cyan" },     { "blue",      S("Blue End Rod"),       "blue" },     { "magenta",   S("Magenta End Rod"),    "magenta" },     { "orange",    S("Orange End Rod"),     "orange" },     { "purple",    S("Purple End Rod"),     "violet" },     { "brown",     S("Brown End Rod"),      "brown" },     { "pink",      S("Pink End Rod"),       "pink" },     { "lime",      S("Lime End Rod"),       "green" },     { "lightblue", S("Light Blue End Rod"), "lightblue" }, } local end_rod_mask = "^[mask:mcl_end_end_rod.png" for num, row in ipairs(colored_end_rods) do     local name = row[1]     local desc = row[2]     local dye = row[3]     local def = table.copy(end_rod_def)     def.description = desc     def._doc_items_longdesc = nil     def._doc_items_create_entry = false     def.use_texture_alpha = "clip"     local side_tex     if name == "pink" then         def.tiles[1] = def.tiles[1] .. "^(" .. def.tiles[1] .. end_rod_mask .. "^[multiply:" .. name .. "^[hsl:0:300)"     elseif num > 4 then         def.tiles[1] = def.tiles[1] ..         "^(" .. def.tiles[1] .. end_rod_mask .. "^[multiply:" .. name .. "^[hsl:0:300^[opacity:120)"     else         def.tiles[1] = def.tiles[1] ..         "^(" .. def.tiles[1] .. end_rod_mask .. "^[multiply:" .. name .. "^[hsl:0:-100^[opacity:170)"     end     minetest.register_node(":"..end_rod_name .. "_" .. name, def)     minetest.register_craft({         type = "shapeless",         output = end_rod_name .. "_" .. name,         recipe = { "group:end_rod", "mcl_dye:" .. dye }     }) end 